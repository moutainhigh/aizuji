<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gz.oss.common.dao.CouponRelationDao" >
  <resultMap id="BaseResultMap" type="org.gz.oss.common.entity.CouponRelation" >
    <id column="id" property="id" />
    <result column="coupon_id" property="couponId" />
    <result column="backage_id" property="backageId"/>
    <result column="coupon_status" property="couponStatus" />
    <result column="user_id" property="userId" />
    <result column="user_name" property="userName" />
    <result column="use_time" property="useTime"  />
    <result column="receive_time" property="receiveTime"  />
    <result column="create_no" property="createNo"  />
    <result column="is_return" property="isReturn" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, coupon_id as couponId, backage_id as backageId, coupon_status as couponStatus, user_name as userName, 
    use_time as useTime, user_id as userId, create_no as createNo, receive_time as receiveTime, is_return as isReturn
  </sql>
  
  <sql id="where">
       <where>
           <if test="null!=couponId">
             coupon_id= #{couponId}
           </if>
           <if test="null!=userId">
               AND user_id = #{userId}
           </if>
           <if test="null!=couponStatus">
               AND coupon_status = #{couponStatus}
           </if>
           <if test="null!=hasTimeStatus and hasTimeStatus == '0'.toString()">
               <![CDATA[ AND to_days(receive_time) = to_days(now()) ]]>
           </if>
           <if test="null!=hasTimeStatus and hasTimeStatus == '1'.toString()">
               <![CDATA[ AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(receive_time) ]]>
           </if>
           <if test="null!=hasTimeStatus and hasTimeStatus == '2'.toString()">
               <![CDATA[ AND DATE_SUB(CURDATE(), INTERVAL 30 DAY) <= date(receive_time) ]]>
           </if>
       </where>
   </sql>
  
  <select id="getHasCount" parameterType="org.gz.oss.common.entity.CouponRelation" resultType="int">
    	select count(*) from coupon_relation where coupon_id = #{couponId}
  </select>
  <select id="getUseCount" parameterType="org.gz.oss.common.entity.CouponRelation" resultType="int">
    	select count(*) from coupon_relation where coupon_id = #{couponId} and coupon_status = '1'
  </select>
  
  <select id="queryPageCount" parameterType="org.gz.oss.common.entity.CouponUserQuery" resultType="int" >
    select count(*) from coupon_relation 
    <include refid="where" />
  </select>
  
  <select id="queryCouponRelationList" parameterType="org.gz.oss.common.entity.CouponUserQuery" resultType="org.gz.oss.common.entity.CouponRelation" >
    select 
    <include refid="Base_Column_List" />
    from coupon_relation
    <include refid="where" />
  </select>
  
  <select id="queryDetail" resultType="org.gz.oss.common.entity.CouponRelation" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from coupon_relation
    where coupon_id = #{couponId}
  </select>
  
  <select id="selectByParams" resultType="org.gz.oss.common.entity.CouponRelation" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from coupon_relation
    where user_id = #{userId} and coupon_id = #{couponId} ORDER BY create_no DESC LIMIT 1
  </select>
  
  <select id="getCRListByUserId" parameterType="java.lang.Long" resultType="org.gz.oss.common.entity.CouponRelation" >
    select 
    <include refid="Base_Column_List" />
    from coupon_relation where user_id = #{userId} and coupon_status = 0
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from coupon_relation
    where id = #{id}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from coupon_relation
    where id = #{id}
  </delete>
  <insert id="insert" parameterType="org.gz.oss.common.entity.CouponRelation" >
    insert into coupon_relation (id, coupon_id, backage_id, 
      coupon_status, user_id, user_name, 
      use_time, receive_time, create_no, is_return
      )
    values (#{id}, #{couponId}, #{backageId}, 
      #{couponStatus}, #{userId}, #{userName}, 
      #{useTime}, #{receiveTime}, #{createNo}, #{isReturn}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.gz.oss.common.entity.CouponRelation" >
    insert into coupon_relation
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="couponId != null" >
        coupon_id,
      </if>
      <if test="backageId != null" >
        backage_id,
      </if>
      <if test="couponStatus != null" >
        coupon_status,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="useTime != null" >
        use_time,
      </if>
      <if test="receiveTime != null" >
        receive_time,
      </if>
      <if test="createNo != null" >
        create_no,
      </if>
      <if test="isReturn != null" >
        is_return,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id},
      </if>
      <if test="couponId != null" >
        #{couponId},
      </if>
      <if test="backageId != null" >
        #{backageId},
      </if>
      <if test="couponStatus != null" >
        #{couponStatus},
      </if>
      <if test="userId != null" >
        #{userId},
      </if>
      <if test="userName != null" >
        #{userName},
      </if>
      <if test="useTime != null" >
        #{useTime},
      </if>
      <if test="receiveTime != null" >
        #{receiveTime},
      </if>
      <if test="createNo != null" >
        #{createNo},
      </if>
      <if test="isReturn != null" >
        #{isReturn},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.gz.oss.common.entity.CouponRelation" >
    update coupon_relation
    <set >
      <if test="couponId != null" >
        coupon_id = #{couponId},
      </if>
      <if test="backageId != null" >
        backage_id = #{backageId},
      </if>
      <if test="couponStatus != null" >
        coupon_status = #{couponStatus},
      </if>
      <if test="userId != null" >
        user_id = #{userId},
      </if>
      <if test="userName != null" >
        user_name = #{userName},
      </if>
      <if test="useTime != null" >
        use_time = #{useTime},
      </if>
      <if test="receiveTime != null" >
        receive_time = #{receiveTime},
      </if>
      <if test="createNo != null" >
        create_no = #{createNo},
      </if>
      <if test="isReturn != null" >
        is_return = #{isReturn},
      </if>
    </set>
    where id = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.gz.oss.common.entity.CouponRelation" >
    update coupon_relation
    set coupon_id = #{couponId},
      backage_id = #{backageId},
      coupon_status = #{couponStatus},
      user_id = #{userId},
      user_name = #{userName},
      use_time = #{useTime},
      receive_time = #{receiveTime},
      create_no = #{createNo},
      is_return = #{isReturn}
    where id = #{id}
  </update>
</mapper>
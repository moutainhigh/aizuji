<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="mapper.ViolationEntityMapper">

	<resultMap id="ViolationMap" type="org.gz.risk.entity.Violation">
		<result property="violationId" column="violation_id" />
		<result property="violationKey" column="violation_key" />
		<result property="violationValue" column="violation_value" />
		<result property="meal" column="meal" />
		<result property="userId" column="user_id" />
		<result property="belong" column="belong" />
		<result property="inputTime" column="input_time" />
		<result property="loanRecord" column="loan_record" />
	</resultMap>

	<sql id="columns">
        <![CDATA[
        violation_id, violation_key, violation_value, meal, user_id, belong, input_time, loan_record
        ]]>
	</sql>
	<sql id="t_columns">
        <![CDATA[
        t.violation_id, t.violation_key, t.violation_value, t.meal, t.user_id, t.belong, t.input_time, t.loan_record
        ]]>
	</sql>

	<sql id="where">
		<where>
			<if test="null!=violationId">
				AND violation_id = #{violationId}
			</if>
			<if test="null!=violationKey and ''!=violationKey">
				AND violation_key = #{violationKey}
			</if>
			<if test="null!=violationValue and ''!=violationValue">
				AND violation_value = #{violationValue}
			</if>
			<if test="null!=meal and ''!=meal">
				AND meal = #{meal}
			</if>
			<if test="null!=userId">
				AND user_id = #{userId}
			</if>
			<if test="null!=belong">
				AND belong = #{belong}
			</if>
			<if test="null!=inputTime and ''!=inputTime">
				AND input_time = #{inputTime}
			</if>
			<if test="null!=loanRecord and ''!=loanRecord">
				AND loan_record = #{loanRecord}
			</if>
		</where>
	</sql>

	<select id="getById" resultMap="ViolationMap">
		SELECT
		<include refid="columns" />
        <![CDATA[
            FROM
                violation
            WHERE 
                violation_id = #{violationId} 
        ]]>
	</select>

	<select id="findAll" resultMap="ViolationMap">
		SELECT
		<include refid="columns" />
		FROM
		violation
	</select>


	<insert id="add" useGeneratedKeys="true" keyProperty="violationId">
		INSERT INTO violation (
		<trim suffix="" suffixOverrides=",">
			<if test="null!=violationKey">
				violation_key,
			</if>
			<if test="null!=violationValue">
				violation_value,
			</if>
			<if test="null!=meal">
				meal,
			</if>
			<if test="null!=userId">
				user_id,
			</if>
			<if test="null!=belong">
				belong,
			</if>
			<if test="null!=inputTime">
				input_time,
			</if>
			<if test="null!=loanRecord">
				loan_record
			</if>
		</trim>
		) VALUES (
		<trim suffix="" suffixOverrides=",">
			<if test="null!=violationKey">
				#{violationKey},
			</if>
			<if test="null!=violationValue">
				#{violationValue},
			</if>
			<if test="null!=meal">
				#{meal},
			</if>
			<if test="null!=userId">
				#{userId},
			</if>
			<if test="null!=belong">
				#{belong},
			</if>
			<if test="null!=inputTime">
				#{inputTime},
			</if>
			<if test="null!=loanRecord">
				#{loanRecord}
			</if>
		</trim>
		)
	</insert>

	<insert id="addBatch">
        <![CDATA[
            INSERT INTO violation (
                violation_key,
                violation_value,
                meal,
                user_id,
                belong,
                input_time,
                loan_record
            ) VALUES
        ]]>
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.violationKey},#{item.violationValue},#{item.meal},#{item.userId},#{item.belong},#{item.inputTime},#{item.loanRecord})
		</foreach>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.gz.risk.entity.Violation">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		update violation
		<set>
			<if test="violationKey != null">
				violation_key = #{violationKey,jdbcType=VARCHAR},
			</if>
			<if test="violationValue != null">
				violation_value = #{violationValue,jdbcType=VARCHAR},
			</if>
			<if test="meal != null">
				meal = #{meal,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=BIGINT},
			</if>
			<if test="belong != null">
				belong = #{belong,jdbcType=INTEGER},
			</if>
			<if test="loanRecord != null">
				loan_record = #{loanRecord,jdbcType=VARCHAR},
			</if>
			<if test="inputTime != null">
				input_time = #{inputTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where violation_id = #{violationId,jdbcType=BIGINT}
	</update>
	<select id="selectByVio" parameterType="java.util.Map"
		resultMap="ViolationMap">
		select
		<include refid="columns" />
		from violation
		where user_id = #{userId}
		and violation_key = #{key}
		GROUP BY user_id
	</select>


	<select id="queryList" resultMap="ViolationMap" parameterType="org.gz.risk.entity.Violation">
		SELECT
		<include refid="columns" />
		FROM
		violation
		<include refid="where" />
	</select>

	<insert id="addGetPK" useGeneratedKeys="true" keyProperty="violationId">
		INSERT INTO violation (
		<trim suffix="" suffixOverrides=",">
			<if test="null!=violationKey">
				violation_key,
			</if>
			<if test="null!=violationValue">
				violation_value,
			</if>
			<if test="null!=meal">
				meal,
			</if>
			<if test="null!=userId">
				user_id,
			</if>
			<if test="null!=belong">
				belong,
			</if>
			<if test="null!=inputTime">
				input_time
			</if>
		</trim>
		) VALUES (
		<trim suffix="" suffixOverrides=",">
			<if test="null!=violationKey">
				#{violationKey},
			</if>
			<if test="null!=violationValue">
				#{violationValue},
			</if>
			<if test="null!=meal">
				#{meal},
			</if>
			<if test="null!=userId">
				#{userId},
			</if>
			<if test="null!=belong">
				#{belong},
			</if>
			<if test="null!=inputTime">
				#{inputTime}
			</if>
		</trim>
		)
	</insert>

	<select id="queryListByUserId" resultMap="ViolationMap">
		SELECT
		<include refid="columns" />
		FROM
		violation
		WHERE userId = #{userId}
	</select>

	<select id="selectByMeal" parameterType="java.util.Map"
		resultMap="ViolationMap">
		select
		<include refid="columns" />
		from
		violation
		where user_id = #{userId}
		and meal = #{meal}
	</select>

	<select id="querySwitch" resultType="java.util.Map">
		select * FROM switch
	</select>

	<update id="updateSwitch" parameterType="java.util.Map">
		update switch SET
		<if test="value != null">
			`value` = #{value},
		</if>
		<if test="value != null">
			`current` = #{value},   <!-- 将上次使用渠道更改为和现在使用渠道一样 -->
		</if>
		`number` = #{number} where id = 1 and `current` = #{current}
	</update>

	<select id="getAbnormalContactsKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_abnormal_contacts_kill(#{idNo})
    </select>
    <select id="getAbnormalInfoKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_abnormal_info_kill(#{userId})
    </select>
    <select id="getApplyKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
    	call loverent_risk.proc_apply_kill(#{userId})
    </select>
    <select id="getScoreApplyScoring" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
     	call loverent_risk.proc_apply_scoring(#{userId})
    </select>
    <select id="getBlackCompanyKilled" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
    	CALL loverent_risk.proc_black_company_killed(#{userId})
    </select>
    <select id="getBlackTelKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
    	CALL loverent_risk.proc_black_tel_kill(#{idNo})
    </select>
    <select id="getCertlengKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_certleng_kill(#{userId})
    </select>
    <select id="getChannelKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_channel_kill(#{userId})
    </select>
    <select id="getCompanyCellNumkill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_company_cell_num_kill(#{companyContactNumber})
    </select>
    <select id="getContactKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_contact_kill(#{userId})
    </select>
    <select id="getCoupleKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_couple_kill(#{rentRecordNo})
    </select>
    <select id="getDenullKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_denull_kill(#{userId})
    </select>
    <select id="getDeviceShareKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_device_share_kill(#{deviceId})
    </select>
    <select id="getDiffMaterial" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_diff_material(#{userId})
    </select>
    <select id="getDiffSpouseKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_diff_spouse_kill(#{idNo})
    </select>
    <select id="getDueContactKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_due_contact_kill(#{phone})
    </select>
    <select id="getEmergencyKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_emergency_kill(#{emergencyContactPhone})
    </select>
    <select id="getIdKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_id_kill(#{idNo})
    </select>
    <select id="getIndustryKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_industry_kill(#{userId})
    </select>
    <select id="getIpKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_ip_kill(#{userId})
    </select>
    <select id="getLoanContactsKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_loan_contacts_kill(#{userId})
    </select>
    <select id="getOutlookKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_outlook_kill(#{userId})
    </select>
    <select id="getRejectKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_reject_kill(#{phoneNum})
    </select>
    <select id="getSameCompanyAddKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_same_company_add_kill(#{companyAddress})
    </select>
    <select id="getSameCompanyPassword" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_same_company_password(#{companyContactNumber})
    </select>
    <select id="getSameContactsIdKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_same_contacts_id_kill(#{emergencyContactPhone})
    </select>
    <select id="getSameContactsNameKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_same_contacts_name_kill(#{userId})
    </select>
    <select id="getSameContactsTelKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_same_contacts_tel_kill(#{userId})
    </select>
    <select id="getSameCurrentAddKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_same_current_add_kill(#{userId})
    </select>
    <select id="getSameIpKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_same_ip_kill(#{userId})
    </select>
  	<select id="getBairongAfublackKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_bairong_afublack_kill(#{userId})
    </select>
      <select id="getBairongBaifuKill" statementType="CALLABLE" parameterType="java.util.List"  resultType="java.util.List">
		call loverent_risk.proc_bairong_baifu_kill(#{userId})
    </select>
  
</mapper>

